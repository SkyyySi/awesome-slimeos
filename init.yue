pcall(require, "luarocks.loader")

do
	const version = _VERSION::match("Lua (%d+.%d+)")
	const base = ";#{os.getenv('HOME')}/.luarocks/share/lua/#{version}"
	const cbase = ";#{os.getenv('HOME')}/.luarocks/lib/lua/#{version}"
	package.path  ..= "#{base }/?.lua#{base}/?/init.lua"
	package.cpath ..= "#{cbase}/?.so#{cbase}/?/init.so"

import "naughty"

import "yue"

naughty.connect_signal("request::display_error", (message, startup) ->
	naughty.notification {
		timeout: 0
		urgency: "critical"
		title:   "Oops, an error happened during " .. (if startup then "startup!" else "runtime!")
		message: yue.traceback(message, 1)
	}
)

import "awful"
import "gears"
require "awful.autofocus"
import "wibox"
import "beautiful"
import "ruled"
import "menubar"
import "awful.hotkeys_popup"
require "awful.hotkeys_popup.keys"

import "lgi"
import cairo, GLib, Gio from lgi
const Gtk = lgi.require("Gtk", "3.0")
const Gdk = lgi.require("Gdk", "3.0")

global notify = (message, timeout=5) ->
	naughty.notification {
		urgency: "normal"
		message: tostring(message)
		:timeout
	}

import awesome, client, screen from _G

import "modules"
import lookup_icon, scale from modules.lib.theme
import json from modules.lib

const config_dir = gears.filesystem.get_configuration_dir()

const config = modules.lib.hot_config.load("#{config_dir}/config.json")

menubar.utils.terminal = config.terminal

for k, v in pairs(config.env)
	GLib.setenv(k, v, true)

for command in *config.autostart
	(stdout, stderr, reason, exit_code) <- awful.spawn.easy_async { "pgrep", "-f", "-U", os.getenv("USER"), command[1] }

	if exit_code == 0
		return

	awful.spawn(command)

try
	const theme = dofile("#{config_dir}/themes/#{config.theme}/theme.lua")

	beautiful.init(theme)
catch err
	naughty.notification {
		urgency: "critical"
		title:   "Could not load theme.yue"
		message: tostring(err)
	}

const edit_config = () ->
	awful.spawn { config.editor, config_dir }

const main_menu = modules.core.menu {
	...config
}

tag.connect_signal("request::default_layouts", () ->
	const s = awful.layout.suit

	awful.layout.append_default_layouts {
		s.tile
		s.floating

		--[[
		s.floating
		s.tile
		s.tile.left
		s.tile.bottom
		s.tile.top
		s.fair
		s.fair.horizontal
		s.spiral
		s.spiral.dwindle
		s.max
		s.max.fullscreen
		s.magnifier
		s.corner.nw
		--]]
	}
)

screen.connect_signal("request::wallpaper", (s) ->
	awful.wallpaper {
		screen: s
		widget: {
			{
				{
					image:     beautiful.wallpaper
					--image:     beautiful.theme_assets.wallpaper(beautiful.bg_normal, beautiful.fg_normal, beautiful.bg_focus, s)
					upscale:   true
					downscale: true
					widget:    wibox.widget.imagebox
				}
				valign: "center"
				halign: "center"
				tiled:  false
				widget: wibox.container.tile
			}
			bg:     beautiful.bg_normal
			widget: wibox.container.background
		}
	}
)

screen.connect_signal("request::desktop_decoration", (s) ->
	awful.tag([ tostring(i) for i = 1, 9 ], s, awful.layout.layouts[1])

	s.prompt_box = awful.widget.prompt()

	s.layoutbox = awful.widget.layoutbox {
		screen:  s
		buttons: {
			awful.button({}, 1, (() -> awful.layout.inc( 1)))
			awful.button({}, 3, (() -> awful.layout.inc(-1)))
			awful.button({}, 4, (() -> awful.layout.inc(-1)))
			awful.button({}, 5, (() -> awful.layout.inc( 1)))
		}
	}

	require("modules.core.panel"){
		screen: s
		menu: main_menu
		:config
	}
)

modules.core.input_bindings { :config, menu: main_menu }
modules.core.rules { :config }
modules.core.titlebar { :config }
modules.core.client { :config }

--[[
do
	const box = wibox {
		height:  scale(50)
		width:   scale(300)
		visible: true
		ontop:   true
		bg:      "#202020"
	}

	awful.placement.bottom_left(box, { honor_workarea: true, margins: scale(5) })

	box.widget = wibox.widget {
		widget: modules.widget.inputbox
	}
--]]