import "awful"
import "gears"
import "wibox"
import "beautiful"

import scale, lookup_icon from "modules.lib.theme"

import "modules.core.panel.common"

export today = () ->
	{
		day:   tonumber(os.date("%d"))
		month: tonumber(os.date("%m"))
		year:  tonumber(os.date("%Y"))
	}

export.<call> = (_, kwargs={}) ->
	with kwargs
		assert(.config)
		assert(.helpers)
		assert(.screen)
		assert(.panel)

	{ :config, :helpers, :screen, :panel } = kwargs

	const base_widget = wibox.widget {
		nil
		{
			font:    "Source Sans Pro, #{beautiful.get_font_size(9)}"
			halign:  "center"
			--line_spacing_factor: 0.75 -- This doesn't work when set to a negative value. For... *some* reason.
			refresh: 1
			widget:  helpers.with_widget(wibox.widget.textclock, (w) ->
				w.format = "<span line_height=\"0.75\">" .. helpers.if_horizontal("%d.%m.%Y\n%H:%M:%S", "%H:%M\n%d.%m\n%Y") .. "</span>"
			)
		}
		layout: wibox.layout.align.vertical
	}

	const shape_factory = () ->
		const radians = switch helpers.get_position()
			when "top"
				0
			when "bottom"
				math.pi
			when "left"
				math.pi * 1.5
			when "right"
				math.pi * 0.5

		(cr, w, h) ->
			const base_shape = gears.shape.transform(gears.shape.infobubble)
				::translate(0, 0)
				::rotate_at(w / 2, h / 2, radians)

			if not helpers.is_horizontal()
				w, h = h, w

			const size = common._outer_spacing_base

			base_shape(cr, w, h, size, size, (w / 2) - size)

	const calendar = wibox.widget {
		{
			{
				widget: wibox.widget.calendar.month(today(), beautiful.font)
			}
			widget: helpers.with_widget(wibox.container.margin, (w) ->
				const base = common.item_spacing * 2
				w.margins = {
					top:    base
					bottom: base
					left:   base
					right:  base
				}
				const position = helpers.get_position()
				w[position] = base + common._outer_spacing_base
			)
		}
		bg:           beautiful.bg_normal
		border_width: beautiful.border_width
		border_color: beautiful.border_color_normal
		widget:       helpers.with_widget(wibox.container.background, (w) ->
			w.shape = shape_factory()
		)
		
	}

	const calendar_popup = awful.popup {
		screen:  screen
		margin:  common.item_spacing
		bg:      gears.color.transparent
		ontop:   true
		visible: false
		widget:  calendar
	}

	--panel::connect_signal("wibar::property_updated", () =>
	--	calendar_popup.shape = shape_factory()
	--)

	calendar_popup.show = () =>
		if c = client.focus
			c.active = false
		@visible = true

	calendar_popup.hide = () =>
		@visible = false

	calendar_popup.toggle = () =>
		if @visible
			@hide()
		else
			@show()

	client.connect_signal("property::active", () =>
		calendar_popup::hide()
	)

	const update_calendar_positon = () ->
		const position = helpers.get_position()

		awful.placement[position](calendar_popup, {
			honor_workarea: true
			--margins:        beautiful.useless_gap -- { [position]: beautiful.useless_gap }
		})

		const widget_geo = mouse.current_widget_geometry

		if not widget_geo
			return

		const dir, size = if helpers.is_horizontal()	
			--calendar_popup.x = widget_geo.x + (widget_geo.width  / 2) - (calendar_popup.width  / 2)
			"x", "width"
		else
			--calendar_popup.y = widget_geo.y + (widget_geo.height / 2) - (calendar_popup.height / 2)
			"y", "height"

		calendar_popup[dir] = widget_geo[dir] + (widget_geo[size] / 2) - (calendar_popup[size] / 2)

	base_widget::connect_signal("button::release", (x, y, b) =>
		if b != 1
			return

		calendar_popup::toggle()

		update_calendar_positon()
	)

	--- The popup isn't shown in the correct position when showing it for the first time
	--- after a restart of awesome if this isn't run
	gears.timer.delayed_call(update_calendar_positon)

	base_widget
