import "awful"
import "menubar"
import "awful.hotkeys_popup"

import key, button from awful

const info = (description, group) ->
	{ :description, :group }

export default (kwargs={}) ->
	with kwargs
		assert(.config)
		assert(.menu)

	{ :config, :menu } = kwargs

	awful.mouse.append_global_mousebindings {
		button({}, 3, (() -> menu::toggle()))
		button({}, 4, awful.tag.viewprev)
		button({}, 5, awful.tag.viewnext)
	}

	awful.keyboard.append_global_keybindings {
		key({ config.modkey },            "s", (() -> hotkeys_popup.show_help()), info("show help",      "awesome"))
		key({ config.modkey },            "w", (() -> menu::show()),              info("show main menu", "awesome"))
		key({ config.modkey, "Control" }, "r", (() -> awesome.restart()),         info("reload awesome", "awesome"))
		key({ config.modkey, "Shift"   }, "q", (() -> awesome.quit()),            info("quit awesome",   "awesome"))
		key({ config.modkey },            "x", (() ->
			awful.prompt.run {
				prompt:       "Run Lua code: "
				textbox:      awful.screen.focused().prompt_box.widget
				exe_callback: awful.util.eval
				history_path: awful.util.get_cache_dir() .. "/history_eval"
			}
		), info("lua execute prompt", "awesome"))
		key({ config.modkey }, "Return", (() -> awful.spawn(config.terminal)),             info("open a terminal",  "launcher"))
		key({ config.modkey }, "r",      (() -> awful.screen.focused().prompt_box::run()), info("run prompt",       "launcher"))
		key({ config.modkey }, "p",      (() -> menubar.show()),                           info("show the menubar", "launcher"))
	}

	awful.keyboard.append_global_keybindings {
		key({ config.modkey }, "Left",   (() -> awful.tag.viewprev()),        info("view previous", "tag"))
		key({ config.modkey }, "Right",  (() -> awful.tag.viewnext()),        info("view next",     "tag"))
		key({ config.modkey }, "Escape", (() -> awful.tag.history.restore()), info("go back",       "tag"))
	}

	awful.keyboard.append_global_keybindings {
		key({ config.modkey }, "j",   (() -> awful.client.focus.byidx( 1)), info("focus next by index",     "client"))
		key({ config.modkey }, "k",   (() -> awful.client.focus.byidx(-1)), info("focus previous by index", "client"))
		key({ config.modkey }, "Tab", (() ->
			awful.client.focus.history.previous()
			if c = client.focus
				c::raise()
		), info("go back", "client"))
		key({ config.modkey, "Control" }, "j", (() -> awful.screen.focus_relative( 1)), info("focus the next screen",     "screen"))
		key({ config.modkey, "Control" }, "k", (() -> awful.screen.focus_relative(-1)), info("focus the previous screen", "screen"))
		key({ config.modkey, "Control" }, "n", (() ->
			if c = awful.client.restore()
				c::activate { raise: true, context: "key.unminimize" }
		), info("restore minimized", "client"))
	}

	awful.keyboard.append_global_keybindings {
		key({ config.modkey, "Shift" },   "j", (() -> awful.client.swap.byidx( 1)),         info("swap with next client by index",        "client")),
		key({ config.modkey, "Shift" },   "k", (() -> awful.client.swap.byidx(-1)),         info("swap with previous client by index",    "client")),
		key({ config.modkey },            "u", (() -> awful.client.urgent.jumpto()),        info("jump to urgent client",                 "client")),
		key({ config.modkey },            "l", (() -> awful.tag.incmwfact( 0.05)),          info("increase master width factor",          "layout")),
		key({ config.modkey },            "h", (() -> awful.tag.incmwfact(-0.05)),          info("decrease master width factor",          "layout")),
		key({ config.modkey, "Shift" },   "h", (() -> awful.tag.incnmaster( 1, nil, true)), info("increase the number of master clients", "layout")),
		key({ config.modkey, "Shift" },   "l", (() -> awful.tag.incnmaster(-1, nil, true)), info("decrease the number of master clients", "layout")),
		key({ config.modkey, "Control" }, "h", (() -> awful.tag.incncol( 1, nil, true)),    info("increase the number of columns",        "layout")),
		key({ config.modkey, "Control" }, "l", (() -> awful.tag.incncol(-1, nil, true)),    info("decrease the number of columns",        "layout")),
		key({ config.modkey },          "space", (() -> awful.layout.inc( 1)), info("select next",     "layout")),
		key({ config.modkey, "Shift" }, "space", (() -> awful.layout.inc(-1)), info("select previous", "layout")),
	}

	const numrow_key = (modifiers, description, on_press) ->
		key {
			keygroup:  "numrow"
			group:     "tag"
			:modifiers
			:description
			:on_press
		}

	awful.keyboard.append_global_keybindings {
		numrow_key({ config.modkey }, "only view tag", (index) ->
			const s = awful.screen.focused()

			if tag = s.tags[index]
				tag::view_only()
		)
		numrow_key({ config.modkey, "Control" }, "toggle tag", (index) ->
			const s = awful.screen.focused()

			if tag = screen.tags[index]
				awful.tag.viewtoggle(tag)
		)
		numrow_key({ config.modkey, "Shift" }, "move focused client to tag", (index) ->
			if not client.focus
				return

			if tag = client.focus.screen.tags[index]
				client.focus::move_to_tag(tag)
		)
		numrow_key({ config.modkey, "Control", "Shift" }, "toggle focused client on tag", ((index) ->
			if not client.focus
				return

			if tag = client.focus.screen.tags[index]
				client.focus::toggle_tag(tag)
		))
		key {
			modifiers:   { config.modkey }
			keygroup:    "numpad"
			description: "select layout directly"
			group:       "layout"
			on_press:    ((index) ->
				if t = awful.screen.focused().selected_tag
					t.layout = t.layouts[index] or t.layout
			)
		}
	}

	client.connect_signal("request::default_mousebindings", () ->
		awful.mouse.append_client_mousebindings {
			awful.button({},                1, ((c) -> c::activate { context: "mouse_click" }))
			awful.button({ config.modkey }, 1, ((c) -> c::activate { context: "mouse_click", action: "mouse_move" }))
			awful.button({ config.modkey }, 3, ((c) -> c::activate { context: "mouse_click", action: "mouse_resize"}))
		}
	)

	client.connect_signal("request::default_keybindings", () ->
		awful.keyboard.append_client_keybindings {
			key({ config.modkey }, "f", ((c) ->
				c.fullscreen = not c.fullscreen
				c::raise()
			), info("toggle fullscreen", "client")),
			key({ config.modkey, "Shift" }, "c", ((c) -> c::kill()), info("close", "client")),
			key({ config.modkey, "Control" }, "space",  awful.client.floating.toggle, info("toggle floating", "client")),
			key({ config.modkey, "Control" }, "Return", ((c) -> c::swap(awful.client.getmaster())), info("move to master", "client")),
			key({ config.modkey }, "o", ((c) -> c::move_to_screen()),   info("move to screen", "client")),
			key({ config.modkey }, "t", ((c) -> c.ontop = not c.ontop), info("toggle keep on top", "client")),
			key({ config.modkey }, "n", ((c) -> c.minimized = true),    info("minimize", "client")),
			key({ config.modkey }, "f", ((c) ->
				c.maximized = not c.maximized
				c::raise()
			), info("(un)maximize", "client")),
			key({ config.modkey, "Control" }, "f", ((c) ->
				c.maximized_vertical = not c.maximized_vertical
				c::raise()
			), info("(un)maximize vertically", "client")),
			key({ config.modkey, "Shift" }, "f", ((c) ->
				c.maximized_horizontal = not c.maximized_horizontal
				c::raise()
			), info("(un)maximize horizontally", "client")),
		}
	)
