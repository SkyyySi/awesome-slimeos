const lpeglabel, relabel = select(2, try
	require("lpeglabel"), require("relabel") 
catch err
	error("Could not import lpeglabel. Try installing it using\n    luarocks --local install --lua-version=#{_VERSION::match('5.%d$')} lpeglabel\n\n------\n#{err}")
)

--- Based on https://gist.github.com/hmenke/4536dda27095634b4563a1a9d854a040

--- Note: This json implementation is somewhat off-spec. It supports the following off-spec features:
--- - trailing commas
--- - single quoted strings
--- - JS identifier names (regex pattern /[a-zA-Z_$][a-zA-Z0-9_$]*/) as object keys
---
--- If more closely adhereing to the standard JSON specification is important, you may use
--- the `strict` option for `json.decode()`.

import P, R, S, V, T, C, Cf, Cg, Ct from lpeglabel
import calcline from relabel

import tonumber, tostring, rawset, assert, error from _G

const real = do
	const digit    = R"09"
	const sign     = S"+-" ^ -1
	const mantissa = ((digit ^ 1) * P"." * (digit ^ 0)) + (P"." * (digit ^ 1) + (digit ^ 1))
	const exponent = (S"eE" * sign * (digit ^ 1)) ^ -1

	sign * mantissa * exponent / tonumber

const iden = do
	const base = R("az", "AZ") + S"_$"
	base * ((base + R"09") ^ 0)

const ws = S" \t\n\r" ^ 0

const lit = (str) ->
    ws * P(str) * ws

const attr = (str, attr) ->
    P(str) / (() -> attr)

--- Lua discards any nil values in tables, so this "fake" null table
--- forces them to get explicitly put into the decoded table. Note that,
--- by default, it will still end up being stripped out, unless you explicitly
--- opt in to keeping it.
export null = {
	<tostring>: () => "null"
}

export escape_string = (s) ->
	s = (s::gsub("\\", "\\\\")
		::gsub("\a", "\\a")
		::gsub("\b", "\\b")
		::gsub("\f", "\\f")
		::gsub("\n", "\\n")
		::gsub("\r", "\\r")
		::gsub("\t", "\\t")
		::gsub("\v", "\\v")
		::gsub("\"", "\\\"")
		::gsub("\127", "\\127") -- DEL / delete key
	)

	--- See: https://www.asciitable.com/
	for i = 1, 26
		const c = string.char(i)
		s = s::gsub(c, "\\#{i}")

	for i = 28, 31
		const c = string.char(i)
		s = s::gsub(c, "\\#{i}")

	s

export unescape_string = (s) ->
	s = s
		::gsub("([^\\])\\a", "%1\a")
		::gsub("([^\\])\\b", "%1\b")
		::gsub("([^\\])\\f", "%1\f")
		::gsub("([^\\])\\n", "%1\n")
		::gsub("([^\\])\\r", "%1\r")
		::gsub("([^\\])\\t", "%1\t")
		::gsub("([^\\])\\v", "%1\v")
		::gsub("([^\\])\\\"", "%1\"")
		::gsub("([^\\])\\127", "%1\127")
		::gsub("\\\\", "\\")

	for i = 1, 26
		const c = string.char(i)
		s = s::gsub("\\#{i}", c)

	for i = 28, 31
		const c = string.char(i)
		s = s::gsub("\\#{i}", c)

	s

export error_map = {
	Syntax: "Syntax error"
	ValueExpected: "Expected a value"
	PairExpected: "Expected a key-value pair"
	ClosingSquareBracketExpected: "Expected a ']' (closing square bracket)"
	ClosingCurlyBracketExpected: "Expected a '}' (closing curly bracket)"
	ClosingDoubleQuoteExpected: "Expected a closing '\"' (double quote)"
	ClosingSingleQuoteExpected: "Expected a closing \"'\" (double quote)"
	StrictTrailingComma: "Trailing commas are not allowed in strict mode"
	StrictIdentifier: "Unquoted identifiers are not allowed in strict mode"
	StrictSingleQuote: "Using single quotes for quoting is not allowed in strict mode"
}

export grammar = P {
	"required_value"
	required_value: V"value" + T"Syntax"
	value: ws * (V"Null" + V"Boolean" + V"String" + V"Number" + V"Array" + V"Object") * ws
	iden: iden
	pair_base: (Cg((V"String" + V"iden") * lit":" * V"value")) -- + (-V"value" + T"ValueExpected"))) + (V"value" + T"PairExpected")
	pair: V"pair_base" -- + (V"value" + T"PairExpected")

	Null: attr("null", null)
	Boolean: attr("true", true) + attr("false", false)
	String: (
		(P'"' * C((P'\\"' + 1 - P'"')^0) * (P'"' + T"ClosingDoubleQuoteExpected")) +
		(P"'" * C((P'\\"' + 1 - P'"')^0) * (P"'" + T"ClosingSingleQuoteExpected"))
	)
	Number: real
	Array:  P"[" * Ct(((V"value" * lit",") ^ 0) * (V"value" ^ -1)) * ws * (P"]" + T"ClosingSquareBracketExpected")
	Object: P"{" * Ct((V"pair"  ^ -1)) * ws * (P"}" + T"ClosingCurlyBracketExpected")
}

export strict_grammar = P {
	"required_value"
	required_value: V"value" + T"Syntax"
	iden: (iden) + T"StrictIdentifier"
	value: ws * (V"Null" + V"Boolean" + V"String" + V"Number" + V"Array" + V"Object") * ws
	pair_base: Cg((V"String" + (-lit"," + T"StrictTrailingComma") + V"iden") * lit":" * (V"value" + T"ValueExpected"))
	pair: (((V"pair_base" * lit",") ^ 0) * (V"pair_base" + T"StrictTrailingComma"))

	Null: attr("null", null)
	Boolean: attr("true", true) + attr("false", false)
	String: ((P'"' * C((P'\\"' + 1 - P'"') ^ 0) * (P'"' + T"ClosingDoubleQuoteExpected"))) -- + (P"'" + T"StrictSingleQuote"))
	Number: real
	Array:  P"[" * ws * (Ct((V"value" * ((lit"," * V"value") ^ 0)) ^ -1)) * (-lit"," + T"StrictTrailingComma") * (ws * P"]" + T"ClosingSquareBracketExpected")
	Object: P"{" * ws * Cf(Ct"" * ((V"pair" * ((lit"," * V"pair") ^ 0) ^ -1)), rawset) * (-lit"," + T"StrictTrailingComma") * (ws * P"}" + T"ClosingCurlyBracketExpected")
}

export is_array = (object) ->
	for k, _ in pairs(object)
		if type(k) != "number"
			return false

	true

export encode = (...) ->
	assert(select("#", ...) > 0, "Expected an object to encode, got nothing")

	--- The `((...) -> ...)(...)` part is a hack to bypass a compiler bug where
	--- it will think that `...` is just one value, thus raising an error.
	object, kwargs, __recursion_state = ((...) -> ...)(...)
	kwargs ??= {}

	if object == null
		return "null"

	const typeof_object = type(object)
	switch typeof_object
		when "number", "boolean"
			return tostring(object)
		when "string"
			return '"' .. escape_string(object) .. '"'
		when "nil"
			return "null"
		when "table"
			--
		else
			error("Cannot serialize object of type '#{typeof_object}' into json!")

	with kwargs
		.minify ??= false
		.indent ??= "\t"

	__recursion_state ??= {
		depth: 0
	}

	local result = ""

	const object_is_array = is_array(object)

	const prefix, suffix = do
		const indent = kwargs.indent::rep(__recursion_state.depth)

		if object_is_array
			"#{indent}[\n", "\n#{indent}]"
		else
			"#{indent}{\n", "\n#{indent}}"

	const indent = kwargs.indent::rep(__recursion_state.depth + 1)

	local is_first = true
	if object_is_array
		for i in *object
			result ..= if is_first
				is_first = false
				"#{indent}#{encode(i)}"
			else
				",\n#{indent}#{encode(i)}"
	else
		for k, v in pairs(object)
			result ..= if is_first
				is_first = false
				"#{indent}#{encode(k)}: #{encode(v)}"
			else
				",\n#{indent}#{encode(k)}: #{encode(v)}"

	prefix .. result .. suffix

export discard_null_values = (object) ->
	if type(object) != "table"
		return object

	for k, v in pairs(object)
		if v == null
			object[k] = nil
			continue

		discard_null_values(v)

	object

export decode = (json, kwargs={}) ->
	with kwargs
		.keep_null_values ??= false
		.strict ??= false

	const object, err, position = if kwargs.strict
		strict_grammar::match(json)
	else
		grammar::match(json)

	if object == nil
		const line, column = calcline(json, position)
		--const message = "Error at line #{line}, column #{column}: "
		
		--error("#{message}#{error_map[err]} (close to '#{json::sub(position - 5)::sub(1, 10)}')")
		const info_line_start = " #{' '::rep(#(tostring(line)))} |"
		error("Something when wrong while trying to decode JSON: #{error_map[err]}
#{info_line_start}
 #{line} | #{json::gsub('[^\n]*\n', '', line - 1)::match('^[^\n]*')}
#{info_line_start} #{' '::rep(column - 2)}^")
	else
		if not kwargs.keep_null_values
			discard_null_values(object)

	object
