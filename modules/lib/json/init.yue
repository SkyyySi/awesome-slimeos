--- The two important functions in this module are `encode()` and `decode()`,
--- which turn a table into a JSON string or vice-versa, respectively.
---
--- ---
---
--- For `encode()`, you may pass an optional table of arguments for formatting:
---
--- - `indent: string = "\t"`
--- - `compact: boolean = false` (Note: Not yet implemented)
---
--- As for `decode()`, optional table arguments are:
---
--- - `strict: boolean = false` When `true`, the parser will check for strict adherence
---   to standard JSON - this means that EcmaScript identifier names (that is, names
---   which match the regex pattern `[a-zA-Z_$][a-zA-Z0-9_$]*`)

const lpeglabel, relabel = select(2, try
	require("lpeglabel"), require("relabel") 
catch err
	error("Could not import lpeglabel. Try installing it using\n    luarocks --local install --lua-version=#{_VERSION::match('5.%d$')} lpeglabel\n\n------\n#{err}")
)

--- Based on https://gist.github.com/hmenke/4536dda27095634b4563a1a9d854a040

--- Note: This json implementation is somewhat off-spec. It supports the following off-spec features:
--- - trailing commas
--- - single quoted strings
--- - JS identifier names (regex pattern /[a-zA-Z_$][a-zA-Z0-9_$]*/) as object keys
---
--- If more closely adhereing to the standard JSON specification is important, you may use
--- the `strict` option for `json.decode()`.

import P, R, S, V, T, C, Cf, Cg, Ct from lpeglabel
import calcline from relabel

import tonumber, tostring, rawset, assert, error from _G

--- Lua discards any nil values in tables, so this "fake" null table
--- forces them to get explicitly put into the decoded table. Note that,
--- by default, it will still end up being stripped out, unless you explicitly
--- opt in to keeping it.
export null = {
	<tostring>: () => "null"
}

export escape_string = (s) ->
	s = (s::gsub("\\", "\\\\")
		::gsub("\a", "\\a")
		::gsub("\b", "\\b")
		::gsub("\f", "\\f")
		::gsub("\n", "\\n")
		::gsub("\r", "\\r")
		::gsub("\t", "\\t")
		::gsub("\v", "\\v")
		::gsub("\"", "\\\"")
		::gsub("\127", "\\127") -- DEL / delete key
	)

	--- See: https://www.asciitable.com/
	for i = 1, 26
		const c = string.char(i)
		s = s::gsub(c, "\\#{i}")

	for i = 28, 31
		const c = string.char(i)
		s = s::gsub(c, "\\#{i}")

	s

export unescape_string = (s) ->
	s = s
		::gsub("([^\\])\\a", "%1\a")
		::gsub("([^\\])\\b", "%1\b")
		::gsub("([^\\])\\f", "%1\f")
		::gsub("([^\\])\\n", "%1\n")
		::gsub("([^\\])\\r", "%1\r")
		::gsub("([^\\])\\t", "%1\t")
		::gsub("([^\\])\\v", "%1\v")
		::gsub("([^\\])\\\"", "%1\"")
		::gsub("([^\\])\\127", "%1\127")
		::gsub("\\\\", "\\")

	for i = 1, 26
		const c = string.char(i)
		s = s::gsub("\\#{i}", c)

	for i = 28, 31
		const c = string.char(i)
		s = s::gsub("\\#{i}", c)

	s

const common = {
	double_quoted_string: (P'"' * C((P'\\"' + 1 - P'"') ^ 0) * (P'"' + T"ClosingDoubleQuoteExpected"))
	number: do
		const digit    = R"09"
		const sign     = S"+-" ^ -1
		const mantissa = ((digit ^ 1) * P"." * (digit ^ 0)) + (P"." * (digit ^ 1) + (digit ^ 1))
		const exponent = (S"eE" * sign * (digit ^ 1)) ^ -1

		sign * mantissa * exponent / tonumber
	identifier: do
		const base = R("az", "AZ") + S"_$"
		base * ((base + R"09") ^ 0)
	whitespace: S" \t\n\r" ^ 0
	non_string_value: V"Null" + V"Boolean" + V"Number" + V"Array" + V"Object"
}

const spaced = (pattern) ->
    common.whitespace * P(pattern) * common.whitespace

const litteral = (str, attr) ->
    P(str) / (() -> attr)

common.null_litteral = litteral("null", null)
common.boolean_litteral = litteral("true", true) + litteral("false", false)
common.array  = (pattern) -> spaced"[" * Ct(       pattern        ) * (spaced"]" + T"ClosingSquareBracketExpected")
common.object = (pattern) -> spaced"{" * Cf(Ct"" * pattern, rawset) * (spaced"}" + T"ClosingCurlyBracketExpected")

export error_map = {
	Syntax: "Syntax error"
	KeyExpected: "Expected a key (a string or a JS identifier name)"
	ValueExpected: "Expected a value"
	PairExpected: "Expected a key-value pair"
	ClosingSquareBracketExpected: "Expected a ']' (closing square bracket)"
	ClosingCurlyBracketExpected: "Expected a '}' (closing curly bracket)"
	ClosingDoubleQuoteExpected: "Expected a closing '\"' (double quote)"
	ClosingSingleQuoteExpected: "Expected a closing \"'\" (single quote)"
	StrictKeyExpected: "Expected a key (a string)"
	StrictTrailingComma: "Trailing commas are not allowed in strict mode"
	StrictIdentifier: "Unquoted identifiers are not allowed in strict mode"
	StrictSingleQuote: "Using single quotes for quoting is not allowed in strict mode"
	<index>: (key) => tostring(key)
}

export grammar = P {
	"required_value"
	required_value: V"value" + T"Syntax"
	value: spaced(common.non_string_value + V"String")
	identifier: C(common.identifier)
	key: V"String" + V"identifier"
	pair: spaced(Cg((V"key" + (-common.non_string_value + T"KeyExpected") * (-V"key" + T"KeyExpected")) *
		spaced":" * (V"value" + ((-V"value" - spaced",") + T"ValueExpected"))))

	Null: common.null_litteral
	Boolean: common.boolean_litteral
	String: (
		common.double_quoted_string +
		(P"'" * C((P"\\'" + 1 - P"'") ^ 0) * (P"'" + T"ClosingSingleQuoteExpected"))
	)
	Number: common.number
	Array:  common.array( (V"value" * spaced","^-1) ^ 0)
	Object: common.object((V"pair"  * spaced","^-1) ^ 0)
}

export strict_grammar = P {
	"required_value"
	required_value: V"value" + T"Syntax"
	value: spaced(common.non_string_value + V"String")
	pair: spaced(Cg((V"String" + (-common.non_string_value + T"StrictKeyExpected") * (-common.identifier + T"StrictIdentifier") *
		(-V"String" + T"StrictKeyExpected")) * spaced":" * (V"value" + ((-V"value" - spaced",") + T"ValueExpected"))))

	Null: common.null_litteral
	Boolean: common.boolean_litteral
	String: (#P"'" * T"StrictSingleQuote") + common.double_quoted_string
	Number: common.number
	Array:  common.array( ((V"value" * ((spaced","^-1) * V"value") ^ 0) ^ -1) * (-spaced"," + T"StrictTrailingComma"))
	Object: common.object(((V"pair"  * ((spaced","^-1) * V"pair" ) ^ 0) ^ -1) * (-spaced"," + T"StrictTrailingComma"))
}

export is_array = (object) ->
	local true_length = 0

	local array, map = true, false

	for k in pairs(object)
		t = type(k)
		if t == "string"
			map = true
			break
		elseif t != "number"
			error("Only array-like tables and string-indexed tables can get serialized to JSON!")
		true_length += 1

	if map
		return false

	if not array
		assert(map, "Only array-like tables and string-indexed tables can get serialized to JSON!")

		return false

	if true_length > #object
		error("Only array-like tables and string-indexed tables can get serialized to JSON!")

	true

export encode = (object, kwargs={}, __recursion_state) ->
	if object == null
		return "null"

	const typeof_object = type(object)
	switch typeof_object
		when "number", "boolean"
			return tostring(object)
		when "string"
			return '"' .. escape_string(object) .. '"'
		when "nil"
			return "null"
		when "table"
			--
		else
			error("Cannot serialize object of type '#{typeof_object}' into json!")

	with kwargs
		.minify ??= false
		.indent ??= "\t"

	__recursion_state ??= {
		depth: 0
	}

	local result = ""

	const object_is_array = is_array(object)

	const prefix, suffix = do
		const indent = kwargs.indent::rep(__recursion_state.depth)

		if object_is_array
			"[\n", "\n#{indent}]"
		else
			"#{indent}{\n", "\n#{indent}}"

	const indent = kwargs.indent::rep(__recursion_state.depth + 1)
	const sub_recursion_state = {
		...__recursion_state
		depth: __recursion_state.depth + 1
	}

	local is_first = true
	if object_is_array
		for i in *object
			result ..= if is_first
				is_first = false
				"#{indent}#{encode(i, kwargs, sub_recursion_state)}"
			else
				",\n#{indent}#{encode(i, kwargs, sub_recursion_state)}"
	else
		for k, v in pairs(object)
			assert(type(k) == "string", "Only array-like tables and string-indexed tables can get serialized to JSON!")
			result ..= if is_first
				is_first = false
				"#{indent}#{encode(k, kwargs, sub_recursion_state)}: #{encode(v, kwargs, sub_recursion_state)}"
			else
				",\n#{indent}#{encode(k, kwargs, sub_recursion_state)}: #{encode(v, kwargs, sub_recursion_state)}"

	prefix .. result .. suffix

export discard_null_values = (object) ->
	if type(object) != "table"
		return object

	for k, v in pairs(object)
		if v == null
			object[k] = nil
			continue

		discard_null_values(v)

	object

export decode = (json, kwargs={}) ->
	with kwargs
		.keep_null_values ??= false
		.strict ??= false

	assert(type(json) == "string")

	json = json::gsub("%s*$", "")

	const object, err, position = if kwargs.strict
		strict_grammar::match(json)
	else
		grammar::match(json)

	if object == nil
		const line, column = calcline(json, position)

		const len = #(tostring(line))
		const info_line_start = " #{' '::rep(len)} |"
		error("Something when wrong while trying to decode JSON:

#{info_line_start}" ..
--(if line > 3 then "\n#{info_line_start} [...]" else "") ..
(if line > 2 then "\n #{"%#{len}d"::format(line-2)} | #{json::gsub('[^\n]*\n', '', line - 3)::match('^[^\n]*')}" else "") ..
(if line > 1 then "\n #{"%#{len}d"::format(line-1)} | #{json::gsub('[^\n]*\n', '', line - 2)::match('^[^\n]*')}" else "") .. "
 #{line} | #{json::gsub('[^\n]*\n', '', line - 1)::match('^[^\n]*')}
#{info_line_start} #{' '::rep(column)}^
#{info_line_start} #{' '::rep(column)}#{error_map[err]}!
#{info_line_start}
")
	else
		if not kwargs.keep_null_values
			discard_null_values(object)

	object
